#!/bin/bash

echo "ü§ñ INICIANDO TESTES AUTOM√ÅTICOS DO SISTEMA INTELIGENTE"
echo "=================================================="

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fun√ß√£o para testar API
test_api() {
    local url=$1
    local description=$2
    local method=${3:-GET}
    
    echo -e "${BLUE}Testando: $description${NC}"
    
    if [ "$method" = "GET" ]; then
        response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3000$url")
    else
        response=$(curl -s -o /dev/null -w "%{http_code}" -X "$method" "http://localhost:3000$url")
    fi
    
    if [ "$response" = "200" ] || [ "$response" = "201" ]; then
        echo -e "  ‚úÖ ${GREEN}$description - Status: $response${NC}"
        return 0
    else
        echo -e "  ‚ùå ${RED}$description - Status: $response${NC}"
        return 1
    fi
}

# Fun√ß√£o para testar p√°gina
test_page() {
    local url=$1
    local description=$2
    
    echo -e "${BLUE}Testando p√°gina: $description${NC}"
    
    response=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3000$url")
    
    if [ "$response" = "200" ]; then
        echo -e "  ‚úÖ ${GREEN}$description carregada - Status: $response${NC}"
        return 0
    else
        echo -e "  ‚ùå ${RED}$description falhou - Status: $response${NC}"
        return 1
    fi
}

# Verificar se servidor est√° rodando
echo -e "${YELLOW}Verificando servidor...${NC}"
if ! curl -s http://localhost:3000 > /dev/null; then
    echo -e "${RED}‚ùå Servidor n√£o est√° rodando na porta 3000${NC}"
    echo "Iniciando servidor..."
    npm run dev &
    SERVER_PID=$!
    sleep 10
fi

echo -e "${GREEN}‚úÖ Servidor est√° rodando${NC}"
echo ""

# Contadores
passed=0
failed=0

# 1. TESTES DE APIS EXISTENTES
echo -e "${YELLOW}üì° TESTANDO APIs EXISTENTES${NC}"
echo "--------------------------------"

apis=(
    "/api/services:Lista de Servi√ßos"
    "/api/demands:Lista de Demandas" 
    "/api/attendances:Lista de Atendimentos"
    "/api/guidance?serviceId=cpf-cadastro:Sistema de Orienta√ß√µes"
    "/api/email:Sistema de Email"
    "/api/reports?type=general:Relat√≥rios"
    "/api/dashboard/stats:Estat√≠sticas do Dashboard"
    "/api/auth/session:Sess√£o de Autentica√ß√£o"
)

for api_test in "${apis[@]}"; do
    IFS=':' read -r url description <<< "$api_test"
    if test_api "$url" "$description"; then
        ((passed++))
    else
        ((failed++))
    fi
done

echo ""

# 2. TESTES DE NOVAS APIs INTELIGENTES
echo -e "${YELLOW}üöÄ TESTANDO NOVAS APIs INTELIGENTES${NC}"
echo "----------------------------------------"

new_apis=(
    "/api/user/profile:API de Perfil do Usu√°rio"
    "/api/user/auto-request:API de Solicita√ß√£o Autom√°tica"
)

for api_test in "${new_apis[@]}"; do
    IFS=':' read -r url description <<< "$api_test"
    if test_api "$url" "$description"; then
        ((passed++))
    else
        ((failed++))
    fi
done

echo ""

# 3. TESTES DE P√ÅGINAS
echo -e "${YELLOW}üåê TESTANDO P√ÅGINAS${NC}"
echo "----------------------"

pages=(
    "/:P√°gina Inicial"
    "/login:P√°gina de Login"
    "/schedule:Agendamento Inteligente"
    "/services:Cat√°logo de Servi√ßos"
    "/dashboard:Dashboard"
    "/monitor:Monitor do Sistema"
)

for page_test in "${pages[@]}"; do
    IFS=':' read -r url description <<< "$page_test"
    if test_page "$url" "$description"; then
        ((passed++))
    else
        ((failed++))
    fi
done

echo ""

# 4. TESTE DE FUNCIONALIDADES INTELIGENTES
echo -e "${YELLOW}üß† TESTANDO FUNCIONALIDADES INTELIGENTES${NC}"
echo "---------------------------------------------"

# Teste de preenchimento autom√°tico (simulado)
echo -e "${BLUE}Testando preenchimento autom√°tico...${NC}"
auto_fill_test=$(curl -s "http://localhost:3000/api/user/auto-request?serviceId=cpf-cadastro" | grep -o '"success"' | wc -l)
if [ "$auto_fill_test" -gt 0 ]; then
    echo -e "  ‚úÖ ${GREEN}Preenchimento autom√°tico funcionando${NC}"
    ((passed++))
else
    echo -e "  ‚ùå ${RED}Preenchimento autom√°tico com problemas${NC}"
    ((failed++))
fi

# Teste de valida√ß√£o inteligente
echo -e "${BLUE}Testando valida√ß√£o de dados...${NC}"
validation_test=$(curl -s "http://localhost:3000/api/user/profile" | grep -E '"error"|"success"' | wc -l)
if [ "$validation_test" -gt 0 ]; then
    echo -e "  ‚úÖ ${GREEN}Sistema de valida√ß√£o ativo${NC}"
    ((passed++))
else
    echo -e "  ‚ùå ${RED}Sistema de valida√ß√£o com problemas${NC}"
    ((failed++))
fi

echo ""

# 5. TESTE DE BANCO DE DADOS
echo -e "${YELLOW}üóÑÔ∏è TESTANDO BANCO DE DADOS${NC}"
echo "-----------------------------"

# Verificar se banco tem dados
db_test=$(curl -s "http://localhost:3000/api/services" | grep -o '"name"' | wc -l)
if [ "$db_test" -gt 3 ]; then
    echo -e "  ‚úÖ ${GREEN}Banco de dados populado com servi√ßos${NC}"
    ((passed++))
else
    echo -e "  ‚ùå ${RED}Banco de dados com poucos dados${NC}"
    ((failed++))
fi

# Teste de usu√°rios
users_test=$(curl -s "http://localhost:3000/api/dashboard/stats" | grep -o '"total"' | wc -l)
if [ "$users_test" -gt 0 ]; then
    echo -e "  ‚úÖ ${GREEN}Sistema de usu√°rios funcionando${NC}"
    ((passed++))
else
    echo -e "  ‚ùå ${RED}Sistema de usu√°rios com problemas${NC}"
    ((failed++))
fi

echo ""

# 6. RELAT√ìRIO FINAL
echo -e "${YELLOW}üìä RELAT√ìRIO FINAL${NC}"
echo "===================="

total=$((passed + failed))
success_rate=$((passed * 100 / total))

echo -e "Total de testes: ${BLUE}$total${NC}"
echo -e "Testes aprovados: ${GREEN}$passed${NC}"
echo -e "Testes falharam: ${RED}$failed${NC}"
echo -e "Taxa de sucesso: ${GREEN}$success_rate%${NC}"

echo ""

if [ $success_rate -ge 80 ]; then
    echo -e "${GREEN}üéâ SISTEMA APROVADO! Taxa de sucesso acima de 80%${NC}"
    echo -e "${GREEN}‚úÖ Sistema Inteligente funcionando corretamente${NC}"
    echo ""
    echo -e "${BLUE}üöÄ FUNCIONALIDADES INTELIGENTES ATIVAS:${NC}"
    echo "  ‚Ä¢ Preenchimento autom√°tico de formul√°rios"
    echo "  ‚Ä¢ Valida√ß√£o inteligente de dados"
    echo "  ‚Ä¢ Hist√≥rico de servi√ßos similares"
    echo "  ‚Ä¢ Sistema de corre√ß√£o autom√°tica"
    echo "  ‚Ä¢ APIs otimizadas para automa√ß√£o"
    echo "  ‚Ä¢ Monitor em tempo real"
    exit 0
else
    echo -e "${RED}‚ö†Ô∏è  SISTEMA REQUER ATEN√á√ÉO! Taxa de sucesso abaixo de 80%${NC}"
    echo -e "${YELLOW}Verifique os erros acima e execute corre√ß√µes${NC}"
    exit 1
fi
