import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function seedNAFServices() {
  console.log('üå± Iniciando seed dos Servi√ßos NAF...')

  // Servi√ßos para Cidad√£os (Pessoas F√≠sicas)
  const cidadaoServices = [
    // Cadastros e Documentos
    {
      name: "Cadastro CPF",
      description: "Inscri√ß√£o, altera√ß√£o, regulariza√ß√£o e consulta de CPF",
      category: "CADASTROS_DOCUMENTOS",
      requirements: "RG, Certid√£o de Nascimento ou Casamento",
      estimatedDuration: 30,
      isActive: true
    },
    {
      name: "Cadastro Nacional de Obras (CNO)",
      description: "Registro obrigat√≥rio de obras de constru√ß√£o civil",
      category: "CADASTROS_DOCUMENTOS", 
      requirements: "CPF, Dados da obra, Alvar√° de constru√ß√£o",
      estimatedDuration: 45,
      isActive: true
    },
    
    // Imposto de Renda
    {
      name: "Declara√ß√£o de Imposto de Renda",
      description: "Elabora√ß√£o e envio da declara√ß√£o anual de ajuste",
      category: "IMPOSTO_RENDA",
      requirements: "Informe de rendimentos, Comprovantes de despesas, CPF",
      estimatedDuration: 90,
      isActive: true
    },
    {
      name: "Isen√ß√£o do IR para Mol√©stias Graves",
      description: "Solicita√ß√£o de isen√ß√£o do imposto de renda para portadores de doen√ßas graves",
      category: "IMPOSTO_RENDA",
      requirements: "Laudo m√©dico, CPF, Comprovantes m√©dicos",
      estimatedDuration: 60,
      isActive: true
    },
    {
      name: "Malha e Restitui√ß√£o do IR",
      description: "Consulta e corre√ß√£o de inconsist√™ncias na declara√ß√£o",
      category: "IMPOSTO_RENDA",
      requirements: "CPF, Declara√ß√£o original",
      estimatedDuration: 45,
      isActive: true
    },
    {
      name: "Destina√ß√£o do IR para Fundos",
      description: "Orienta√ß√£o sobre destina√ß√£o do imposto para fundos de direitos",
      category: "IMPOSTO_RENDA",
      requirements: "Declara√ß√£o de IR",
      estimatedDuration: 20,
      isActive: true
    },

    // E-Social e Trabalhista
    {
      name: "E-Social Dom√©stico",
      description: "Cadastro e gest√£o de obriga√ß√µes de empregados dom√©sticos",
      category: "ESOCIAL_TRABALHISTA",
      requirements: "CPF empregador, Dados do empregado, Contrato",
      estimatedDuration: 60,
      isActive: true
    },

    // Certid√µes e Consultas
    {
      name: "Certid√£o Negativa de D√©bitos",
      description: "Emiss√£o de certid√£o de regularidade fiscal",
      category: "CERTIDOES_CONSULTAS",
      requirements: "CPF",
      estimatedDuration: 15,
      isActive: true
    },
    {
      name: "Consulta de D√≠vidas e Pend√™ncias",
      description: "Verifica√ß√£o de pend√™ncias fiscais junto √† Receita Federal",
      category: "CERTIDOES_CONSULTAS",
      requirements: "CPF",
      estimatedDuration: 15,
      isActive: true
    },

    // Pagamentos e Parcelamentos
    {
      name: "Gera√ß√£o de DARF",
      description: "Documento de Arrecada√ß√£o de Receitas Federais",
      category: "PAGAMENTOS_PARCELAMENTOS",
      requirements: "CPF, Dados do tributo",
      estimatedDuration: 20,
      isActive: true
    },
    {
      name: "Parcelamento de D√≠vidas Tribut√°rias",
      description: "Solicita√ß√£o de parcelamento de d√©bitos com a Receita Federal",
      category: "PAGAMENTOS_PARCELAMENTOS",
      requirements: "CPF, Demonstrativo de d√©bitos",
      estimatedDuration: 45,
      isActive: true
    },
    {
      name: "Orienta√ß√µes sobre Transa√ß√£o Tribut√°ria",
      description: "Acordos para quita√ß√£o de d√©bitos tribut√°rios",
      category: "PAGAMENTOS_PARCELAMENTOS",
      requirements: "CPF, Proposta de transa√ß√£o",
      estimatedDuration: 60,
      isActive: true
    },

    // Com√©rcio Exterior
    {
      name: "Orienta√ß√µes sobre Bagagens Internacionais",
      description: "Aux√≠lio sobre bagagens em viagens ao exterior",
      category: "COMERCIO_EXTERIOR",
      requirements: "Passaporte, Bilhete de viagem",
      estimatedDuration: 30,
      isActive: true
    },
    {
      name: "Orienta√ß√µes sobre Encomendas Internacionais",
      description: "Tributos e procedimentos para compras do exterior",
      category: "COMERCIO_EXTERIOR",
      requirements: "CPF, Invoice, Comprovante de compra",
      estimatedDuration: 30,
      isActive: true
    },

    // Isen√ß√µes Especiais
    {
      name: "Isen√ß√£o de IPI para Taxistas",
      description: "Isen√ß√£o de IPI na aquisi√ß√£o de ve√≠culos para taxistas",
      category: "ISENCOES_ESPECIAIS",
      requirements: "Alvar√° de taxista, CPF, Documentos do ve√≠culo",
      estimatedDuration: 45,
      isActive: true
    },
    {
      name: "Isen√ß√£o de IPI/IOF para PcD e TEA",
      description: "Isen√ß√£o para pessoas com defici√™ncia e Transtorno do Espectro Autista",
      category: "ISENCOES_ESPECIAIS",
      requirements: "Laudo m√©dico, CPF, Documentos espec√≠ficos",
      estimatedDuration: 60,
      isActive: true
    }
  ]

  // Servi√ßos Rurais
  const ruralServices = [
    {
      name: "CNIR - Cadastro Nacional de Im√≥veis Rurais",
      description: "Cadastro obrigat√≥rio de propriedades rurais",
      category: "RURAL_ITR",
      requirements: "CPF, Documentos do im√≥vel, Georreferenciamento",
      estimatedDuration: 60,
      isActive: true
    },
    {
      name: "DITR - Declara√ß√£o do ITR",
      description: "Declara√ß√£o anual do Imposto Territorial Rural",
      category: "RURAL_ITR",
      requirements: "CNIR, CPF, Documentos do im√≥vel",
      estimatedDuration: 90,
      isActive: true
    },
    {
      name: "Servi√ßos Relativos ao ITR",
      description: "Consultas, c√°lculos e orienta√ß√µes sobre ITR",
      category: "RURAL_ITR",
      requirements: "CPF, CNIR",
      estimatedDuration: 45,
      isActive: true
    },
    {
      name: "Certid√£o Negativa Rural",
      description: "Certid√£o espec√≠fica para propriedades rurais",
      category: "RURAL_ITR",
      requirements: "CPF, CNIR",
      estimatedDuration: 20,
      isActive: true
    }
  ]

  // Servi√ßos para Empresas/MEI
  const empresaServices = [
    {
      name: "CAEPF - Cadastro de Atividades Econ√¥micas PF",
      description: "Cadastro de atividades econ√¥micas de pessoas f√≠sicas",
      category: "MEI_EMPRESAS",
      requirements: "CPF, Descri√ß√£o das atividades",
      estimatedDuration: 30,
      isActive: true
    },
    {
      name: "CNPJ - Cadastro Nacional de Pessoas Jur√≠dicas",
      description: "Inscri√ß√£o, altera√ß√£o e baixa de CNPJ",
      category: "MEI_EMPRESAS",
      requirements: "Contrato social, CPF dos s√≥cios, Documentos espec√≠ficos",
      estimatedDuration: 60,
      isActive: true
    },
    {
      name: "Obriga√ß√µes Fiscais do MEI",
      description: "DAS-MEI e Declara√ß√£o Anual Simplificada",
      category: "MEI_EMPRESAS",
      requirements: "CPF, CNPJ do MEI",
      estimatedDuration: 45,
      isActive: true
    },
    {
      name: "Com√©rcio Exterior para MEI",
      description: "Orienta√ß√µes sobre importa√ß√£o e exporta√ß√£o para MEI",
      category: "MEI_EMPRESAS",
      requirements: "CNPJ MEI, Documentos espec√≠ficos",
      estimatedDuration: 60,
      isActive: true
    }
  ]

  // Servi√ßos Gerais
  const geraisServices = [
    {
      name: "Acesso Remoto - Senha GOV.BR",
      description: "Apoio para cria√ß√£o e uso da senha GOV.BR",
      category: "ACESSO_DIGITAL",
      requirements: "CPF, Documento com foto",
      estimatedDuration: 30,
      isActive: true
    },
    {
      name: "Agendamento na Receita Federal",
      description: "Agendamento para atendimento presencial na RF",
      category: "ATENDIMENTO_PRESENCIAL",
      requirements: "CPF",
      estimatedDuration: 15,
      isActive: true
    }
  ]

  // Inserir todos os servi√ßos
  const allServices = [
    ...cidadaoServices,
    ...ruralServices, 
    ...empresaServices,
    ...geraisServices
  ]

  console.log(`üìù Inserindo ${allServices.length} servi√ßos NAF...`)

  for (const serviceData of allServices) {
    try {
      // Verificar se o servi√ßo j√° existe
      const existingService = await prisma.service.findFirst({
        where: { name: serviceData.name }
      })

      if (existingService) {
        console.log(`‚ö†Ô∏è  Servi√ßo '${serviceData.name}' j√° existe, atualizando...`)
        await prisma.service.update({
          where: { id: existingService.id },
          data: serviceData
        })
      } else {
        console.log(`‚úÖ Criando servi√ßo '${serviceData.name}'...`)
        await prisma.service.create({
          data: serviceData
        })
      }
    } catch (error) {
      console.error(`‚ùå Erro ao processar '${serviceData.name}':`, error)
    }
  }

  // Estat√≠sticas finais
  const totalServices = await prisma.service.count()
  const activeServices = await prisma.service.count({ where: { isActive: true } })
  
  console.log(`üéâ Seed conclu√≠do!`)
  console.log(`üìä Total de servi√ßos: ${totalServices}`)
  console.log(`‚úÖ Servi√ßos ativos: ${activeServices}`)

  const servicesByCategory = await prisma.service.groupBy({
    by: ['category'],
    _count: { _all: true },
    where: { isActive: true }
  })

  console.log(`üìã Servi√ßos por categoria:`)
  servicesByCategory.forEach(group => {
    console.log(`   ${group.category}: ${group._count._all} servi√ßos`)
  })
}

async function main() {
  try {
    await seedNAFServices()
  } catch (error) {
    console.error('‚ùå Erro durante o seed:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

main()
