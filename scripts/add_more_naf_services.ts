import { PrismaClient } from '@prisma/client'

const prisma = new PrismaClient()

async function addMoreNAFServices() {
  console.log('üå± Adicionando mais servi√ßos NAF essenciais...')

  // Servi√ßos NAF adicionais importantes
  const additionalServices = [
    // √Årea Digital
    {
      name: "Certificado Digital A1 e A3",
      description: "Orienta√ß√£o sobre certifica√ß√£o digital para pessoas f√≠sicas e jur√≠dicas",
      category: "ACESSO_DIGITAL",
      requirements: "CPF/CNPJ, Documento com foto, Comprovante de resid√™ncia",
      estimatedDuration: 45,
      isActive: true
    },
    {
      name: "Senha Web - Receita Federal",
      description: "Cria√ß√£o e recupera√ß√£o de senha para acesso aos servi√ßos da RF",
      category: "ACESSO_DIGITAL", 
      requirements: "CPF, Documento com foto",
      estimatedDuration: 30,
      isActive: true
    },

    // Previd√™ncia e Trabalhista
    {
      name: "CNIS - Cadastro Nacional de Informa√ß√µes Sociais",
      description: "Consulta ao extrato previdenci√°rio e per√≠odos de contribui√ß√£o",
      category: "PREVIDENCIA_TRABALHISTA",
      requirements: "CPF, Documento com foto",
      estimatedDuration: 20,
      isActive: true
    },
    {
      name: "Aux√≠lio-Doen√ßa e Benef√≠cios INSS",
      description: "Orienta√ß√£o sobre requerimento de benef√≠cios previdenci√°rios",
      category: "PREVIDENCIA_TRABALHISTA", 
      requirements: "CPF, Documentos m√©dicos, Carteira de trabalho",
      estimatedDuration: 60,
      isActive: true
    },

    // Regulariza√ß√£o Fiscal
    {
      name: "Domic√≠lio Tribut√°rio Eletr√¥nico",
      description: "Cadastro e altera√ß√£o de domic√≠lio tribut√°rio eletr√¥nico",
      category: "REGULARIZACAO_FISCAL",
      requirements: "CPF/CNPJ, Comprovante de endere√ßo",
      estimatedDuration: 30,
      isActive: true
    },
    {
      name: "Parcelamento Especial de D√©bitos",
      description: "Ades√£o a programas especiais de parcelamento tribut√°rio",
      category: "REGULARIZACAO_FISCAL",
      requirements: "CPF/CNPJ, Demonstrativo de d√©bitos",
      estimatedDuration: 45,
      isActive: true
    },

    // Simples Nacional e MEI
    {
      name: "Simples Nacional - Op√ß√£o e Exclus√£o",
      description: "Orienta√ß√£o sobre regime tribut√°rio do Simples Nacional",
      category: "SIMPLES_MEI",
      requirements: "CNPJ, Contrato social, Faturamento anual",
      estimatedDuration: 60,
      isActive: true
    },
    {
      name: "MEI - Desenquadramento",
      description: "Processo de sa√≠da do regime MEI por limite de faturamento",
      category: "SIMPLES_MEI",
      requirements: "CNPJ MEI, Relat√≥rios de faturamento",
      estimatedDuration: 45,
      isActive: true
    },

    // √Årea Rural Espec√≠fica
    {
      name: "CAR - Cadastro Ambiental Rural",
      description: "Cadastro obrigat√≥rio de im√≥veis rurais para regulariza√ß√£o ambiental",
      category: "AREA_RURAL",
      requirements: "CPF, Documentos da propriedade, Coordenadas geogr√°ficas",
      estimatedDuration: 90,
      isActive: true
    },
    {
      name: "CCIR - Certificado de Cadastro de Im√≥vel Rural",
      description: "Emiss√£o de certificado para im√≥veis rurais",
      category: "AREA_RURAL",
      requirements: "CPF, CNIR, Documentos da propriedade",
      estimatedDuration: 30,
      isActive: true
    },

    // √Årea Internacional
    {
      name: "Carn√™-Le√£o",
      description: "Recolhimento mensal de imposto de renda sobre rendimentos",
      category: "INTERNACIONAL",
      requirements: "CPF, Comprovantes de rendimentos",
      estimatedDuration: 45,
      isActive: true
    },
    {
      name: "DSIC - Declara√ß√£o sobre Bens e Direitos no Exterior",
      description: "Declara√ß√£o de capitais brasileiros no exterior",
      category: "INTERNACIONAL",
      requirements: "CPF, Documentos dos bens no exterior",
      estimatedDuration: 60,
      isActive: true
    },

    // Pessoa Jur√≠dica
    {
      name: "ECD - Escritura√ß√£o Cont√°bil Digital",
      description: "Orienta√ß√£o sobre obriga√ß√µes de escritura√ß√£o cont√°bil digital",
      category: "PESSOA_JURIDICA",
      requirements: "CNPJ, Balan√ßos cont√°beis",
      estimatedDuration: 120,
      isActive: true
    },
    {
      name: "ECF - Escritura√ß√£o Cont√°bil Fiscal",
      description: "Escritura√ß√£o fiscal digital para apura√ß√£o do IRPJ e CSLL",
      category: "PESSOA_JURIDICA",
      requirements: "CNPJ, Demonstra√ß√µes cont√°beis",
      estimatedDuration: 120,
      isActive: true
    },

    // Processos Administrativos
    {
      name: "Impugna√ß√£o de Auto de Infra√ß√£o",
      description: "Orienta√ß√£o sobre contesta√ß√£o de autua√ß√µes fiscais",
      category: "PROCESSOS_ADMINISTRATIVOS",
      requirements: "CPF/CNPJ, Auto de infra√ß√£o, Documentos comprobat√≥rios",
      estimatedDuration: 90,
      isActive: true
    },
    {
      name: "Recurso Administrativo",
      description: "Interposi√ß√£o de recursos em processos administrativos fiscais",
      category: "PROCESSOS_ADMINISTRATIVOS",
      requirements: "N√∫mero do processo, Decis√£o administrativa",
      estimatedDuration: 120,
      isActive: true
    }
  ]

  console.log(`üìù Inserindo ${additionalServices.length} servi√ßos NAF adicionais...`)

  for (const serviceData of additionalServices) {
    try {
      // Verificar se o servi√ßo j√° existe
      const existingService = await prisma.service.findFirst({
        where: { name: serviceData.name }
      })

      if (existingService) {
        console.log(`‚ö†Ô∏è  Servi√ßo '${serviceData.name}' j√° existe, atualizando...`)
        await prisma.service.update({
          where: { id: existingService.id },
          data: serviceData
        })
      } else {
        console.log(`‚úÖ Criando servi√ßo '${serviceData.name}'...`)
        await prisma.service.create({
          data: serviceData
        })
      }
    } catch (error) {
      console.error(`‚ùå Erro ao processar '${serviceData.name}':`, error)
    }
  }

  // Estat√≠sticas finais
  const totalServices = await prisma.service.count()
  const activeServices = await prisma.service.count({ where: { isActive: true } })
  
  console.log(`üéâ Servi√ßos adicionais inseridos!`)
  console.log(`üìä Total de servi√ßos no sistema: ${totalServices}`)
  console.log(`‚úÖ Servi√ßos ativos: ${activeServices}`)

  const servicesByCategory = await prisma.service.groupBy({
    by: ['category'],
    _count: { _all: true },
    where: { isActive: true }
  })

  console.log(`üìã Servi√ßos por categoria:`)
  servicesByCategory.forEach(group => {
    console.log(`   ${group.category}: ${group._count._all} servi√ßos`)
  })
}

async function main() {
  try {
    await addMoreNAFServices()
  } catch (error) {
    console.error('‚ùå Erro durante a inser√ß√£o:', error)
    process.exit(1)
  } finally {
    await prisma.$disconnect()
  }
}

main()
